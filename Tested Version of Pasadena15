# -*- coding: utf-8 -*-
"""
Created on Fri Mar  4 17:20:26 2016

@author: u5446998
"""
import random
import math

def tosser():
    n = 1
    t = random.random()
    while t <= 0.5:
        n = n+1
        t = random.random()
#    print "n = %s." % n
    return n

def pasadena():
    n = tosser()
    return math.pow(-1,n-1)*(math.pow(2,n)/n)
    
def pasadena15(): #This is not yet a proper pasadena -.11 game yet. I got the p right for this turn but, the chance is wrong. 
    m = tosser()
    p = recoverpayoff(m)
#    print "p = %s." % p
    return p
    
def repeater(n):
    l = list()
    for i in range(1,n+1):
        q = pasadena15()
        l.append(q)
#    print "l = %s." % l
    return l
    
def singlemeancalculator(n):
    l = repeater(n)
#    print "len = %s." % len(l)
    return sum(l)/float(len(l))

def median(l):
    half = len(l) // 2
    l.sort()
    if not len(l) % 2:
        return (l[half - 1] + l[half]) / 2.0
    return l[half]

def pluralmediancalculator(m,n):
    l = list()
    for i in range(1,m+1):
        l.append(singlemeancalculator(n))
    return median(l)


def recovern(m):    #input m, output n
    if m%6 == 1:
        n = (2*(m-1))/6+1
#        p = math.pow(-1,n-1)*(math.pow(2,n)/n)
        
    elif m%6 == 0:
        n = m/6 * 10
#        p = math.pow(-1,n-1)*(math.pow(2,n)/n)
        
    else:
        n = 2*(m-(1+((m-(m%6))/6)))
#        p = math.pow(-1,n-1)*(math.pow(2,n)/n)
    return float(n)

def recoverpayoff(m): #input m, output payoff
    n = recovern(m)    
    p = math.pow(-1,n-1)*(math.pow(2,n)/n)
    return p

def recoverproduct(m): #input m, output product
    n = recovern(m)
    if (n % 2 == 0):
        product = -(1/n)
    else:
        product = 1/n
    return product

def recoversp(m):   #input m, output sp
    product = recoverproduct(m)
    p = recoverpayoff(m)
    sp = product / p
    return sp

def getip(m): #this one is to get inline probability for given m by converting sp into ip using the formula given in gwiazda
    sp = recoversp(m)    
    ip = sp
    if m == 1:
        ip = sp
    else: 
        for i in xrange(1,m):
            ip = ip * (1/(1-recoversp(i)))
            print ip
    return ip
\
